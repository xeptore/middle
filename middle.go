// Code generated by github.com/xeptore/middle/v3. DO NOT EDIT.

package middle

import "net/http"

type mw1[A any] struct {
	f1 func(http.ResponseWriter, *http.Request) (A, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw1[A]) Then(handler func(http.ResponseWriter, *http.Request, A)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		handler(response, request, a)
	}
}

// Chain1 creates a chain of exactly 1 number of function that will be executed in order.
func Chain1[A any](f1 func(http.ResponseWriter, *http.Request) (A, error)) mw1[A] {
	return mw1[A]{f1}
}

type mw2[A any, B any] struct {
	f1 func(http.ResponseWriter, *http.Request) (A, error)
	f2 func(http.ResponseWriter, *http.Request) (B, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw2[A, B]) Then(handler func(http.ResponseWriter, *http.Request, A, B)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b)
	}
}

// Chain2 creates a chain of exactly 2 number of functions that will be executed in order.
func Chain2[A any, B any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error)) mw2[A, B] {
	return mw2[A, B]{f1, f2}
}

type mw3[A any, B any, C any] struct {
	f1 func(http.ResponseWriter, *http.Request) (A, error)
	f2 func(http.ResponseWriter, *http.Request) (B, error)
	f3 func(http.ResponseWriter, *http.Request) (C, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw3[A, B, C]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c)
	}
}

// Chain3 creates a chain of exactly 3 number of functions that will be executed in order.
func Chain3[A any, B any, C any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error)) mw3[A, B, C] {
	return mw3[A, B, C]{f1, f2, f3}
}

type mw4[A any, B any, C any, D any] struct {
	f1 func(http.ResponseWriter, *http.Request) (A, error)
	f2 func(http.ResponseWriter, *http.Request) (B, error)
	f3 func(http.ResponseWriter, *http.Request) (C, error)
	f4 func(http.ResponseWriter, *http.Request) (D, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw4[A, B, C, D]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d)
	}
}

// Chain4 creates a chain of exactly 4 number of functions that will be executed in order.
func Chain4[A any, B any, C any, D any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error)) mw4[A, B, C, D] {
	return mw4[A, B, C, D]{f1, f2, f3, f4}
}

type mw5[A any, B any, C any, D any, E any] struct {
	f1 func(http.ResponseWriter, *http.Request) (A, error)
	f2 func(http.ResponseWriter, *http.Request) (B, error)
	f3 func(http.ResponseWriter, *http.Request) (C, error)
	f4 func(http.ResponseWriter, *http.Request) (D, error)
	f5 func(http.ResponseWriter, *http.Request) (E, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw5[A, B, C, D, E]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e)
	}
}

// Chain5 creates a chain of exactly 5 number of functions that will be executed in order.
func Chain5[A any, B any, C any, D any, E any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error)) mw5[A, B, C, D, E] {
	return mw5[A, B, C, D, E]{f1, f2, f3, f4, f5}
}

type mw6[A any, B any, C any, D any, E any, F any] struct {
	f1 func(http.ResponseWriter, *http.Request) (A, error)
	f2 func(http.ResponseWriter, *http.Request) (B, error)
	f3 func(http.ResponseWriter, *http.Request) (C, error)
	f4 func(http.ResponseWriter, *http.Request) (D, error)
	f5 func(http.ResponseWriter, *http.Request) (E, error)
	f6 func(http.ResponseWriter, *http.Request) (F, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw6[A, B, C, D, E, F]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f)
	}
}

// Chain6 creates a chain of exactly 6 number of functions that will be executed in order.
func Chain6[A any, B any, C any, D any, E any, F any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error)) mw6[A, B, C, D, E, F] {
	return mw6[A, B, C, D, E, F]{f1, f2, f3, f4, f5, f6}
}

type mw7[A any, B any, C any, D any, E any, F any, G any] struct {
	f1 func(http.ResponseWriter, *http.Request) (A, error)
	f2 func(http.ResponseWriter, *http.Request) (B, error)
	f3 func(http.ResponseWriter, *http.Request) (C, error)
	f4 func(http.ResponseWriter, *http.Request) (D, error)
	f5 func(http.ResponseWriter, *http.Request) (E, error)
	f6 func(http.ResponseWriter, *http.Request) (F, error)
	f7 func(http.ResponseWriter, *http.Request) (G, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw7[A, B, C, D, E, F, G]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g)
	}
}

// Chain7 creates a chain of exactly 7 number of functions that will be executed in order.
func Chain7[A any, B any, C any, D any, E any, F any, G any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error)) mw7[A, B, C, D, E, F, G] {
	return mw7[A, B, C, D, E, F, G]{f1, f2, f3, f4, f5, f6, f7}
}

type mw8[A any, B any, C any, D any, E any, F any, G any, H any] struct {
	f1 func(http.ResponseWriter, *http.Request) (A, error)
	f2 func(http.ResponseWriter, *http.Request) (B, error)
	f3 func(http.ResponseWriter, *http.Request) (C, error)
	f4 func(http.ResponseWriter, *http.Request) (D, error)
	f5 func(http.ResponseWriter, *http.Request) (E, error)
	f6 func(http.ResponseWriter, *http.Request) (F, error)
	f7 func(http.ResponseWriter, *http.Request) (G, error)
	f8 func(http.ResponseWriter, *http.Request) (H, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw8[A, B, C, D, E, F, G, H]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h)
	}
}

// Chain8 creates a chain of exactly 8 number of functions that will be executed in order.
func Chain8[A any, B any, C any, D any, E any, F any, G any, H any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error)) mw8[A, B, C, D, E, F, G, H] {
	return mw8[A, B, C, D, E, F, G, H]{f1, f2, f3, f4, f5, f6, f7, f8}
}

type mw9[A any, B any, C any, D any, E any, F any, G any, H any, I any] struct {
	f1 func(http.ResponseWriter, *http.Request) (A, error)
	f2 func(http.ResponseWriter, *http.Request) (B, error)
	f3 func(http.ResponseWriter, *http.Request) (C, error)
	f4 func(http.ResponseWriter, *http.Request) (D, error)
	f5 func(http.ResponseWriter, *http.Request) (E, error)
	f6 func(http.ResponseWriter, *http.Request) (F, error)
	f7 func(http.ResponseWriter, *http.Request) (G, error)
	f8 func(http.ResponseWriter, *http.Request) (H, error)
	f9 func(http.ResponseWriter, *http.Request) (I, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw9[A, B, C, D, E, F, G, H, I]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i)
	}
}

// Chain9 creates a chain of exactly 9 number of functions that will be executed in order.
func Chain9[A any, B any, C any, D any, E any, F any, G any, H any, I any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error)) mw9[A, B, C, D, E, F, G, H, I] {
	return mw9[A, B, C, D, E, F, G, H, I]{f1, f2, f3, f4, f5, f6, f7, f8, f9}
}

type mw10[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw10[A, B, C, D, E, F, G, H, I, J]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j)
	}
}

// Chain10 creates a chain of exactly 10 number of functions that will be executed in order.
func Chain10[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error)) mw10[A, B, C, D, E, F, G, H, I, J] {
	return mw10[A, B, C, D, E, F, G, H, I, J]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10}
}

type mw11[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw11[A, B, C, D, E, F, G, H, I, J, K]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k)
	}
}

// Chain11 creates a chain of exactly 11 number of functions that will be executed in order.
func Chain11[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error)) mw11[A, B, C, D, E, F, G, H, I, J, K] {
	return mw11[A, B, C, D, E, F, G, H, I, J, K]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11}
}

type mw12[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw12[A, B, C, D, E, F, G, H, I, J, K, L]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l)
	}
}

// Chain12 creates a chain of exactly 12 number of functions that will be executed in order.
func Chain12[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error)) mw12[A, B, C, D, E, F, G, H, I, J, K, L] {
	return mw12[A, B, C, D, E, F, G, H, I, J, K, L]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12}
}

type mw13[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw13[A, B, C, D, E, F, G, H, I, J, K, L, M]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m)
	}
}

// Chain13 creates a chain of exactly 13 number of functions that will be executed in order.
func Chain13[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error)) mw13[A, B, C, D, E, F, G, H, I, J, K, L, M] {
	return mw13[A, B, C, D, E, F, G, H, I, J, K, L, M]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13}
}

type mw14[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n)
	}
}

// Chain14 creates a chain of exactly 14 number of functions that will be executed in order.
func Chain14[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error)) mw14[A, B, C, D, E, F, G, H, I, J, K, L, M, N] {
	return mw14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14}
}

type mw15[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
	}
}

// Chain15 creates a chain of exactly 15 number of functions that will be executed in order.
func Chain15[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error)) mw15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O] {
	return mw15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15}
}

type mw16[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
	}
}

// Chain16 creates a chain of exactly 16 number of functions that will be executed in order.
func Chain16[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error)) mw16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P] {
	return mw16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16}
}

type mw17[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
	}
}

// Chain17 creates a chain of exactly 17 number of functions that will be executed in order.
func Chain17[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error)) mw17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q] {
	return mw17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17}
}

type mw18[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
	f18 func(http.ResponseWriter, *http.Request) (R, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		r, err := middleware.f18(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
	}
}

// Chain18 creates a chain of exactly 18 number of functions that will be executed in order.
func Chain18[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error), f18 func(http.ResponseWriter, *http.Request) (R, error)) mw18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R] {
	return mw18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18}
}

type mw19[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
	f18 func(http.ResponseWriter, *http.Request) (R, error)
	f19 func(http.ResponseWriter, *http.Request) (S, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		r, err := middleware.f18(response, request)
		if nil != err {
			return
		}
		s, err := middleware.f19(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s)
	}
}

// Chain19 creates a chain of exactly 19 number of functions that will be executed in order.
func Chain19[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error), f18 func(http.ResponseWriter, *http.Request) (R, error), f19 func(http.ResponseWriter, *http.Request) (S, error)) mw19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S] {
	return mw19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19}
}

type mw20[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
	f18 func(http.ResponseWriter, *http.Request) (R, error)
	f19 func(http.ResponseWriter, *http.Request) (S, error)
	f20 func(http.ResponseWriter, *http.Request) (T, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		r, err := middleware.f18(response, request)
		if nil != err {
			return
		}
		s, err := middleware.f19(response, request)
		if nil != err {
			return
		}
		t, err := middleware.f20(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t)
	}
}

// Chain20 creates a chain of exactly 20 number of functions that will be executed in order.
func Chain20[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error), f18 func(http.ResponseWriter, *http.Request) (R, error), f19 func(http.ResponseWriter, *http.Request) (S, error), f20 func(http.ResponseWriter, *http.Request) (T, error)) mw20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T] {
	return mw20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20}
}

type mw21[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
	f18 func(http.ResponseWriter, *http.Request) (R, error)
	f19 func(http.ResponseWriter, *http.Request) (S, error)
	f20 func(http.ResponseWriter, *http.Request) (T, error)
	f21 func(http.ResponseWriter, *http.Request) (U, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		r, err := middleware.f18(response, request)
		if nil != err {
			return
		}
		s, err := middleware.f19(response, request)
		if nil != err {
			return
		}
		t, err := middleware.f20(response, request)
		if nil != err {
			return
		}
		u, err := middleware.f21(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u)
	}
}

// Chain21 creates a chain of exactly 21 number of functions that will be executed in order.
func Chain21[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error), f18 func(http.ResponseWriter, *http.Request) (R, error), f19 func(http.ResponseWriter, *http.Request) (S, error), f20 func(http.ResponseWriter, *http.Request) (T, error), f21 func(http.ResponseWriter, *http.Request) (U, error)) mw21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U] {
	return mw21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21}
}

type mw22[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
	f18 func(http.ResponseWriter, *http.Request) (R, error)
	f19 func(http.ResponseWriter, *http.Request) (S, error)
	f20 func(http.ResponseWriter, *http.Request) (T, error)
	f21 func(http.ResponseWriter, *http.Request) (U, error)
	f22 func(http.ResponseWriter, *http.Request) (V, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		r, err := middleware.f18(response, request)
		if nil != err {
			return
		}
		s, err := middleware.f19(response, request)
		if nil != err {
			return
		}
		t, err := middleware.f20(response, request)
		if nil != err {
			return
		}
		u, err := middleware.f21(response, request)
		if nil != err {
			return
		}
		v, err := middleware.f22(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v)
	}
}

// Chain22 creates a chain of exactly 22 number of functions that will be executed in order.
func Chain22[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error), f18 func(http.ResponseWriter, *http.Request) (R, error), f19 func(http.ResponseWriter, *http.Request) (S, error), f20 func(http.ResponseWriter, *http.Request) (T, error), f21 func(http.ResponseWriter, *http.Request) (U, error), f22 func(http.ResponseWriter, *http.Request) (V, error)) mw22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V] {
	return mw22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22}
}

type mw23[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any, W any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
	f18 func(http.ResponseWriter, *http.Request) (R, error)
	f19 func(http.ResponseWriter, *http.Request) (S, error)
	f20 func(http.ResponseWriter, *http.Request) (T, error)
	f21 func(http.ResponseWriter, *http.Request) (U, error)
	f22 func(http.ResponseWriter, *http.Request) (V, error)
	f23 func(http.ResponseWriter, *http.Request) (W, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw23[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		r, err := middleware.f18(response, request)
		if nil != err {
			return
		}
		s, err := middleware.f19(response, request)
		if nil != err {
			return
		}
		t, err := middleware.f20(response, request)
		if nil != err {
			return
		}
		u, err := middleware.f21(response, request)
		if nil != err {
			return
		}
		v, err := middleware.f22(response, request)
		if nil != err {
			return
		}
		w, err := middleware.f23(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w)
	}
}

// Chain23 creates a chain of exactly 23 number of functions that will be executed in order.
func Chain23[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any, W any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error), f18 func(http.ResponseWriter, *http.Request) (R, error), f19 func(http.ResponseWriter, *http.Request) (S, error), f20 func(http.ResponseWriter, *http.Request) (T, error), f21 func(http.ResponseWriter, *http.Request) (U, error), f22 func(http.ResponseWriter, *http.Request) (V, error), f23 func(http.ResponseWriter, *http.Request) (W, error)) mw23[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W] {
	return mw23[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23}
}

type mw24[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any, W any, X any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
	f18 func(http.ResponseWriter, *http.Request) (R, error)
	f19 func(http.ResponseWriter, *http.Request) (S, error)
	f20 func(http.ResponseWriter, *http.Request) (T, error)
	f21 func(http.ResponseWriter, *http.Request) (U, error)
	f22 func(http.ResponseWriter, *http.Request) (V, error)
	f23 func(http.ResponseWriter, *http.Request) (W, error)
	f24 func(http.ResponseWriter, *http.Request) (X, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw24[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		r, err := middleware.f18(response, request)
		if nil != err {
			return
		}
		s, err := middleware.f19(response, request)
		if nil != err {
			return
		}
		t, err := middleware.f20(response, request)
		if nil != err {
			return
		}
		u, err := middleware.f21(response, request)
		if nil != err {
			return
		}
		v, err := middleware.f22(response, request)
		if nil != err {
			return
		}
		w, err := middleware.f23(response, request)
		if nil != err {
			return
		}
		x, err := middleware.f24(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x)
	}
}

// Chain24 creates a chain of exactly 24 number of functions that will be executed in order.
func Chain24[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any, W any, X any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error), f18 func(http.ResponseWriter, *http.Request) (R, error), f19 func(http.ResponseWriter, *http.Request) (S, error), f20 func(http.ResponseWriter, *http.Request) (T, error), f21 func(http.ResponseWriter, *http.Request) (U, error), f22 func(http.ResponseWriter, *http.Request) (V, error), f23 func(http.ResponseWriter, *http.Request) (W, error), f24 func(http.ResponseWriter, *http.Request) (X, error)) mw24[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X] {
	return mw24[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24}
}

type mw25[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any, W any, X any, Y any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
	f18 func(http.ResponseWriter, *http.Request) (R, error)
	f19 func(http.ResponseWriter, *http.Request) (S, error)
	f20 func(http.ResponseWriter, *http.Request) (T, error)
	f21 func(http.ResponseWriter, *http.Request) (U, error)
	f22 func(http.ResponseWriter, *http.Request) (V, error)
	f23 func(http.ResponseWriter, *http.Request) (W, error)
	f24 func(http.ResponseWriter, *http.Request) (X, error)
	f25 func(http.ResponseWriter, *http.Request) (Y, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw25[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		r, err := middleware.f18(response, request)
		if nil != err {
			return
		}
		s, err := middleware.f19(response, request)
		if nil != err {
			return
		}
		t, err := middleware.f20(response, request)
		if nil != err {
			return
		}
		u, err := middleware.f21(response, request)
		if nil != err {
			return
		}
		v, err := middleware.f22(response, request)
		if nil != err {
			return
		}
		w, err := middleware.f23(response, request)
		if nil != err {
			return
		}
		x, err := middleware.f24(response, request)
		if nil != err {
			return
		}
		y, err := middleware.f25(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y)
	}
}

// Chain25 creates a chain of exactly 25 number of functions that will be executed in order.
func Chain25[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any, W any, X any, Y any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error), f18 func(http.ResponseWriter, *http.Request) (R, error), f19 func(http.ResponseWriter, *http.Request) (S, error), f20 func(http.ResponseWriter, *http.Request) (T, error), f21 func(http.ResponseWriter, *http.Request) (U, error), f22 func(http.ResponseWriter, *http.Request) (V, error), f23 func(http.ResponseWriter, *http.Request) (W, error), f24 func(http.ResponseWriter, *http.Request) (X, error), f25 func(http.ResponseWriter, *http.Request) (Y, error)) mw25[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y] {
	return mw25[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25}
}

type mw26[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any, W any, X any, Y any, Z any] struct {
	f1  func(http.ResponseWriter, *http.Request) (A, error)
	f2  func(http.ResponseWriter, *http.Request) (B, error)
	f3  func(http.ResponseWriter, *http.Request) (C, error)
	f4  func(http.ResponseWriter, *http.Request) (D, error)
	f5  func(http.ResponseWriter, *http.Request) (E, error)
	f6  func(http.ResponseWriter, *http.Request) (F, error)
	f7  func(http.ResponseWriter, *http.Request) (G, error)
	f8  func(http.ResponseWriter, *http.Request) (H, error)
	f9  func(http.ResponseWriter, *http.Request) (I, error)
	f10 func(http.ResponseWriter, *http.Request) (J, error)
	f11 func(http.ResponseWriter, *http.Request) (K, error)
	f12 func(http.ResponseWriter, *http.Request) (L, error)
	f13 func(http.ResponseWriter, *http.Request) (M, error)
	f14 func(http.ResponseWriter, *http.Request) (N, error)
	f15 func(http.ResponseWriter, *http.Request) (O, error)
	f16 func(http.ResponseWriter, *http.Request) (P, error)
	f17 func(http.ResponseWriter, *http.Request) (Q, error)
	f18 func(http.ResponseWriter, *http.Request) (R, error)
	f19 func(http.ResponseWriter, *http.Request) (S, error)
	f20 func(http.ResponseWriter, *http.Request) (T, error)
	f21 func(http.ResponseWriter, *http.Request) (U, error)
	f22 func(http.ResponseWriter, *http.Request) (V, error)
	f23 func(http.ResponseWriter, *http.Request) (W, error)
	f24 func(http.ResponseWriter, *http.Request) (X, error)
	f25 func(http.ResponseWriter, *http.Request) (Y, error)
	f26 func(http.ResponseWriter, *http.Request) (Z, error)
}

// Then executes handler once all middleware functions are executed in order. Chain of functions execution stops if any of the middleware functions returns a non-nil error.
func (middleware mw26[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]) Then(handler func(http.ResponseWriter, *http.Request, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z)) http.HandlerFunc {
	return func(response http.ResponseWriter, request *http.Request) {
		a, err := middleware.f1(response, request)
		if nil != err {
			return
		}
		b, err := middleware.f2(response, request)
		if nil != err {
			return
		}
		c, err := middleware.f3(response, request)
		if nil != err {
			return
		}
		d, err := middleware.f4(response, request)
		if nil != err {
			return
		}
		e, err := middleware.f5(response, request)
		if nil != err {
			return
		}
		f, err := middleware.f6(response, request)
		if nil != err {
			return
		}
		g, err := middleware.f7(response, request)
		if nil != err {
			return
		}
		h, err := middleware.f8(response, request)
		if nil != err {
			return
		}
		i, err := middleware.f9(response, request)
		if nil != err {
			return
		}
		j, err := middleware.f10(response, request)
		if nil != err {
			return
		}
		k, err := middleware.f11(response, request)
		if nil != err {
			return
		}
		l, err := middleware.f12(response, request)
		if nil != err {
			return
		}
		m, err := middleware.f13(response, request)
		if nil != err {
			return
		}
		n, err := middleware.f14(response, request)
		if nil != err {
			return
		}
		o, err := middleware.f15(response, request)
		if nil != err {
			return
		}
		p, err := middleware.f16(response, request)
		if nil != err {
			return
		}
		q, err := middleware.f17(response, request)
		if nil != err {
			return
		}
		r, err := middleware.f18(response, request)
		if nil != err {
			return
		}
		s, err := middleware.f19(response, request)
		if nil != err {
			return
		}
		t, err := middleware.f20(response, request)
		if nil != err {
			return
		}
		u, err := middleware.f21(response, request)
		if nil != err {
			return
		}
		v, err := middleware.f22(response, request)
		if nil != err {
			return
		}
		w, err := middleware.f23(response, request)
		if nil != err {
			return
		}
		x, err := middleware.f24(response, request)
		if nil != err {
			return
		}
		y, err := middleware.f25(response, request)
		if nil != err {
			return
		}
		z, err := middleware.f26(response, request)
		if nil != err {
			return
		}
		handler(response, request, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)
	}
}

// Chain26 creates a chain of exactly 26 number of functions that will be executed in order.
func Chain26[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any, P any, Q any, R any, S any, T any, U any, V any, W any, X any, Y any, Z any](f1 func(http.ResponseWriter, *http.Request) (A, error), f2 func(http.ResponseWriter, *http.Request) (B, error), f3 func(http.ResponseWriter, *http.Request) (C, error), f4 func(http.ResponseWriter, *http.Request) (D, error), f5 func(http.ResponseWriter, *http.Request) (E, error), f6 func(http.ResponseWriter, *http.Request) (F, error), f7 func(http.ResponseWriter, *http.Request) (G, error), f8 func(http.ResponseWriter, *http.Request) (H, error), f9 func(http.ResponseWriter, *http.Request) (I, error), f10 func(http.ResponseWriter, *http.Request) (J, error), f11 func(http.ResponseWriter, *http.Request) (K, error), f12 func(http.ResponseWriter, *http.Request) (L, error), f13 func(http.ResponseWriter, *http.Request) (M, error), f14 func(http.ResponseWriter, *http.Request) (N, error), f15 func(http.ResponseWriter, *http.Request) (O, error), f16 func(http.ResponseWriter, *http.Request) (P, error), f17 func(http.ResponseWriter, *http.Request) (Q, error), f18 func(http.ResponseWriter, *http.Request) (R, error), f19 func(http.ResponseWriter, *http.Request) (S, error), f20 func(http.ResponseWriter, *http.Request) (T, error), f21 func(http.ResponseWriter, *http.Request) (U, error), f22 func(http.ResponseWriter, *http.Request) (V, error), f23 func(http.ResponseWriter, *http.Request) (W, error), f24 func(http.ResponseWriter, *http.Request) (X, error), f25 func(http.ResponseWriter, *http.Request) (Y, error), f26 func(http.ResponseWriter, *http.Request) (Z, error)) mw26[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z] {
	return mw26[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]{f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26}
}
